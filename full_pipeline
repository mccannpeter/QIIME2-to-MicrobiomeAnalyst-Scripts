###############################################################################
# SECTION 1: Copy FASTQ Files to Working Directory
###############################################################################

#Find and copy fastq.gz files to working directory
find /users/40179895/sharedscratch/bethany_qiime/raw_reads/fastq -type f -name "*.fastq.gz" -exec cp {} . \;


###############################################################################
# SECTION 2: Prepare Sample Mapping from SampleSheet.csv
###############################################################################

# Path to SampleSheet.csv
SAMPLESHEET="SampleSheet.csv"

# Convert to Unix-style line endings and create mapping
declare -A sample_map
sed -i 's/\r//' "$SAMPLESHEET"
while IFS=',' read -r sample_id _ _ _ _ _ description; do
    [[ "$sample_id" == "Sample_ID" || -z "$sample_id" ]] && continue
    sample_map["$sample_id"]="$description"
done < "$SAMPLESHEET"


###############################################################################
# SECTION 3: Rename FASTQ Files Using Mapping
###############################################################################

# Rename fastq.gz files
for file in *.fastq.gz; do
    sample_id=$(grep -oE 'PN0545_[0-9]{4}' <<< "$file")
    [[ ${sample_map[$sample_id]} ]] && mv "$file" "${sample_map[$sample_id]}_${file#${sample_id}_}" || echo "No mapping for $file"
done


###############################################################################
# SECTION 4: Load QIIME 2 Module and Run QIIME Pipeline
###############################################################################

# Load qiime in HPC - QIIME 2 version: 2021.11.0
module load apps/qiime2/2021.11

# Run qiime2 pipeline version -
qiime tools import --type 'SampleData[PairedEndSequencesWithQuality]' --input-path reads --input-format CasavaOneEightSingleLanePerSampleDirFmt --output-path demux-paired-end.qza && \
qiime dada2 denoise-paired --i-demultiplexed-seqs demux-paired-end.qza --p-trim-left-f 13 --p-trim-left-r 13 --p-trunc-len-f 250 --p-trunc-len-r 250 --o-representative-sequences rep-seqs-dada2.qza --o-table table-dada2.qza --o-denoising-stats stats-dada2.qza && \
qiime feature-table summarize   --i-table table-dada2.qza   --o-visualization table-dada2.qzv   --m-sample-metadata-file sample_metadata.tsv && \
qiime feature-table tabulate-seqs   --i-data rep-seqs-dada2.qza   --o-visualization rep-seqs-dada2.qzv && \
qiime feature-classifier classify-sklearn   --i-classifier silva138_AB_V4_classifier.qza   --i-reads rep-seqs-dada2.qza   --output-dir bethany-taxonomy.qza   --verbose && \
qiime taxa barplot   --i-table table-dada2.qza   --i-taxonomy bethany-taxonomy.qza   --m-metadata-file sample_metadata.tsv   --o-visualization bethany-taxa-bar-plots.qzv


###############################################################################
# SECTION 5: Format Metadata for MicrobiomeAnalyst
###############################################################################

#Format metadata for microbiome analyst
sed 's/_rep_[0-9]*//g' sample_metadata.csv > preMA_sample_metadata.csv
sed -E 's/_rep_[0-9]+//g; s/_[0-9]+([,]|$)/\1/g' preMA_sample_metadata.csv | tr -d '\r' > MA_sample_metadata.csv


###############################################################################
# SECTION 6: Notes on QIIME Taxa Barplots and Downstream Count Matrix Processing
###############################################################################

# The qiime taxa barplots command can be loaded into qiime view to obtain the raw count matrix, the reads present in 
# the kitomes then need to be removed from the real samples, the below scripts cover the formatting of the count 
# matrix and decontaminating the counts

#Before running Decontam in R, you need to make sure the files are in the right format.
#We need a count data table (with unique ASV or OTU names in the first column). 
#Transform the data for phyloseq from QIIME2 ASV table:

#1. Change classification table into "OTU-style" table: 


###############################################################################
# SECTION 7: Prepare QIIME2 Output for R (Header Fixes, ASV Renaming)
###############################################################################

#1.1 Change the top label #Name to #ASVID and all "-" to "." for all column headers:
head -1 rat_count_matrix.csv | sed 's/\#NAME,/\#ASVID,/' | tr "-" "." > headers_rat_tax.csv

#1.2 Create a first column with unique ASV IDs (similat to OTU tables) and remove the taxonomy lineage column:
sed '1d' rat_count_matrix.csv | awk -F',' 'BEGIN{num=1};{print "ASV_"num","$0;num=num+1}' | cut -d"," -f1,3-100 > pre-rat_tax_ASVrenamed.csv

#1.3 Combine the new headers with the new table into 1 table for analysis:
cat headers_rat_tax.csv pre-rat_tax_ASVrenamed.csv > rat_tax_ASVrenamed.csv


###############################################################################
# SECTION 8: Create Taxonomy Table
###############################################################################

#2. Create taxonomy table:

#2.1 Create new headers:
echo "ASVID,Domain,Phylum,Class,Order,Family,Genus,Species" > header-taxonomy.txt

#2.2 Create taxonomy table (without counts or samples):
sed '1d' rat_count_matrix.csv | awk -F',' 'BEGIN{num=1};{print "ASV_"num","$1;num=num+1}' | sed 's/;__/;NA/g' > pre-taxonomy_table.csv

#2.3 Combine the new headers with the new table into 1 table for analysis:
cat header-taxonomy.txt pre-taxonomy_table.csv > taxonomy_table.csv


###############################################################################
# SECTION 9: Metadata Table Creation (Manual Steps)
###############################################################################

#3. Metadata table:
#Done manually. I selected the columns I needed based on the example, and changed values accordingly 
#(for example, True Sample or Control Sample, and changed some of the Group names). 
#File is called: decontam-metadata.txt


###############################################################################
# SECTION 10: R Code - Load Libraries and Set Working Directory
###############################################################################

library(phyloseq); packageVersion("phyloseq")
[1] ‘1.48.0’
library(ggplot2); packageVersion("ggplot2")
[1] ‘3.5.1’
library(decontam); packageVersion("decontam")
[1] ‘1.24.0’
library("biomformat")

setwd("/Users/peter/BETHANY_RAT_PROJECT")


###############################################################################
# SECTION 11: Build Phyloseq Object and Perform Decontam Analysis
###############################################################################

# Ensure input files are correctly formatted
# Read in data
ASV_tab <- read.csv("rat_tax_ASVrenamed.csv", header = TRUE, sep = ",", row.names = 1)
taxonomy_tab <- as.matrix(read.csv("taxonomy_table.csv", header = TRUE, row.names = 1, sep = ","))
sample_data_tab <- read.table("decontam-metadata.txt", header = TRUE, row.names = 1, sep = "\t")

# Create phyloseq object
OTU <- otu_table(ASV_tab, taxa_are_rows = TRUE)
TAX <- tax_table(taxonomy_tab)
sampledata <- sample_data(sample_data_tab)
physeq <- phyloseq(OTU, TAX, sampledata)

# Start decontam analysis
ps <- physeq

# Inspect library sizes
df <- as.data.frame(sample_data(ps)) # Put sample_data into a ggplot-friendly data.frame
df$LibrarySize <- sample_sums(ps)
df <- df[order(df$LibrarySize), ]
df$Index <- seq_len(nrow(df))

ggplot(data = df, aes(x = Index, y = LibrarySize, color = Sample_or_Control)) + 
     geom_point()

# Check graph with sample labels
ggplot(data = df, aes(x = Index, y = LibrarySize, color = Sample_or_Control)) + 
     geom_point() +
     geom_text(aes(label = rownames(df)), check_overlap = TRUE)

# Identify Contaminants - Prevalence Method
# Compare the prevalence of each feature in true samples vs. negative controls
sample_data(ps)$is.neg <- sample_data(ps)$Sample_or_Control == "Control Sample"
contamdf.prev <- isContaminant(ps, method = "prevalence", neg = "is.neg")
table(contamdf.prev$contaminant)
FALSE  TRUE 
 767    36 
head(which(contamdf.prev$contaminant))
[1]   4  23  42  52  73 160

# Repeat with a more aggressive threshold (0.5):
contamdf.prev05 <- isContaminant(ps, method = "prevalence", neg = "is.neg", threshold = 0.5)
table(contamdf.prev05$contaminant)

FALSE  TRUE 
  714    89 

# Visualize contamination prevalence
ps.pa <- transform_sample_counts(ps, function(abund) 1 * (abund > 0))
ps.pa.neg <- prune_samples(sample_data(ps.pa)$Sample_or_Control == "Control Sample", ps.pa)
ps.pa.pos <- prune_samples(sample_data(ps.pa)$Sample_or_Control == "True Sample", ps.pa)

df.pa <- data.frame(
     pa.pos = taxa_sums(ps.pa.pos), 
     pa.neg = taxa_sums(ps.pa.neg),
     contaminant = contamdf.prev$contaminant
)

ggplot(data = df.pa, aes(x = pa.neg, y = pa.pos, color = contaminant)) + 
     geom_point() +
     xlab("Prevalence (Negative Controls)") + 
     ylab("Prevalence (True Samples)")

# Remove contaminants
ps.noncontam <- prune_taxa(!contamdf.prev$contaminant, ps)
ps.noncontam
Pyloseq-class experiment-level object
otu_table()   OTU Table:         [ 767 taxa and 100 samples ]
sample_data() Sample Data:       [ 100 samples by 2 sample variables ]
tax_table()   Taxonomy Table:    [ 767 taxa by 7 taxonomic ranks ]

# Save contaminant analysis results
write.table(contamdf.prev, file = "ASV_rat_contaminant_analysis_results.txt", sep = '\t')

# Save filtered table (without contaminants) as OTU abundance matrix
OTU_decont <- as(otu_table(ps.noncontam), "matrix")
write.table(OTU_decont, file = "ASV_rat_abundance.csv", sep = ',')


###############################################################################
# SECTION 12: Further Steps - Final Table Creation and Cleanup
###############################################################################

#AFTER the Decontam analysis in R
#To get the pruned table (filtered from contaminants) with taxonomy classification.

#4. Create the full table (similar to the command to create the OTU/style table above):

sed '1d' rat_count_matrix.csv | awk -F',' 'BEGIN{num=1};{print "ASV_"num","$0;num=num+1}' > pretab.csv
head -1 rat_count_matrix.csv | sed 's/\#NAME,/\ASVID,/;s/,/,Taxonomy,/1' > headers_rat_tax.csv
cat headers_rat_tax.csv pretab.csv > ASV_rat_taxonomy_abundances_fulltable.csv


#5. Get the list to remove:

grep "TRUE" ASV_rat_contaminant_analysis_results.txt | cut -f1 | tr -d '"' | sed 's/$/,/' > list_to_remove


#6. Remove and prepare table as original (without ASV labels and displaying full taxonomy in first column):

grep -v -f list_to_remove ASV_rat_taxonomy_abundances_fulltable.csv | cut -d"," -f2-100 > Decont_RAT_Taxonomy_abundances_table.csv


###############################################################################
# SECTION 13: Future Steps and Downstream Analysis
###############################################################################

# Further downstream analysis carried out in MicrobiomeAnalyst
